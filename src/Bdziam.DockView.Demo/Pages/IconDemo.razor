@page "/icondemo"
@using Bdziam.DockView.Data
@using Bdziam.DockView.Components

<PageTitle>DockView Icon Demo</PageTitle>

<div class="demo-container">
    <div class="demo-section">
        <h3>Lock Toggle Demo</h3>
        <p>Lock State: <strong>@(isLocked ? "Locked" : "Unlocked")</strong></p>
        
        <DockViewIcon Function="lock" 
                      IsToggled="isLocked"
                      OnToggleChanged="OnLockToggleChanged"
                      OnClick="OnLockClick" />
    </div>

    <div class="demo-section">
        <h3>Dropdown Demo</h3>
        
        <DockViewDropdownIcon Function="dropdown">
            <DockViewContent>
                <DockViewDropdown>
                    <DockViewDropdownItem Text="Export Data" 
                                          Icon="download" 
                                          Click="OnExportClick" />
                    <DockViewDropdownItem Text="Import Data" 
                                          Icon="upload" 
                                          Click="OnImportClick" />
                    <DockViewDropdownItem Text="Settings" 
                                          Icon="settings" 
                                          Click="OnSettingsClick" />
                    <DockViewDropdownItem Text="Disabled Item" 
                                          Icon="block" 
                                          Disabled="true"
                                          Click="OnDisabledClick" />
                </DockViewDropdown>
            </DockViewContent>
        </DockViewDropdownIcon>
    </div>

    <div class="demo-section">
        <h3>DockView with Custom Panel Dropdowns</h3>
        
        <BdziamDockView @ref="dockView" Name="icon-demo-dockview"
                        ShowClose="true" ShowLock="true" ShowFloat="true" 
                        ShowMaximize="true" ShowPin="true" Theme="DockViewTheme.Light">
            
            <DockViewComponent Key="panel1" Title="Panel with Custom Dropdown">
                <DockViewContent>
                    <div class="panel-content">
                        <h4>Panel 1 Content</h4>
                        <p>This panel has a custom dropdown menu.</p>
                    </div>
                    
                    <DockViewDropdown>
                        <DockViewDropdownItem Text="Panel Action 1" 
                                              Icon="star" 
                                              Click="OnPanelAction1" />
                        <DockViewDropdownItem Text="Panel Action 2" 
                                              Icon="favorite" 
                                              Click="OnPanelAction2" />
                        <DockViewDropdownItem Text="Delete Panel" 
                                              Icon="delete" 
                                              CssClass="text-danger"
                                              Click="OnDeletePanel" />
                    </DockViewDropdown>
                </DockViewContent>
            </DockViewComponent>
            
            <DockViewComponent Key="panel2" Title="Another Panel">
                <DockViewContent>
                    <div class="panel-content">
                        <h4>Panel 2 Content</h4>
                        <p>This panel has different dropdown items.</p>
                    </div>
                    
                    <DockViewDropdown>
                        <DockViewDropdownItem Text="Refresh Data" 
                                              Icon="refresh" 
                                              Click="OnRefreshData" />
                        <DockViewDropdownItem Text="Share Panel" 
                                              Icon="share" 
                                              Click="OnSharePanel" />
                    </DockViewDropdown>
                </DockViewContent>
            </DockViewComponent>
            
        </BdziamDockView>
    </div>

    <div class="demo-section">
        <h3>Event Log</h3>
        <div class="event-log">
            @foreach (var logEntry in eventLog)
            {
                <div class="log-entry">@logEntry</div>
            }
        </div>
        <button class="btn btn-secondary" @onclick="ClearLog">Clear Log</button>
    </div>
</div>

@code {
    private BdziamDockView? dockView;
    private bool isLocked = false;
    private List<string> eventLog = new();

    private async Task OnLockToggleChanged(bool newState)
    {
        isLocked = newState;
        AddLogEntry($"Lock state changed to: {(newState ? "Locked" : "Unlocked")}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnLockClick(MouseEventArgs args)
    {
        AddLogEntry("Lock icon was clicked");
    }

    private async Task OnExportClick(MouseEventArgs args)
    {
        AddLogEntry("Export Data clicked");
    }

    private async Task OnImportClick(MouseEventArgs args)
    {
        AddLogEntry("Import Data clicked");
    }

    private async Task OnSettingsClick(MouseEventArgs args)
    {
        AddLogEntry("Settings clicked");
    }

    private async Task OnDisabledClick(MouseEventArgs args)
    {
        AddLogEntry("Disabled item clicked (shouldn't appear)");
    }

    private async Task OnPanelAction1(MouseEventArgs args)
    {
        AddLogEntry("Panel Action 1 clicked");
    }

    private async Task OnPanelAction2(MouseEventArgs args)
    {
        AddLogEntry("Panel Action 2 clicked");
    }

    private async Task OnDeletePanel(MouseEventArgs args)
    {
        AddLogEntry("Delete Panel clicked");
    }

    private async Task OnRefreshData(MouseEventArgs args)
    {
        AddLogEntry("Refresh Data clicked");
    }

    private async Task OnSharePanel(MouseEventArgs args)
    {
        AddLogEntry("Share Panel clicked");
    }

    private void AddLogEntry(string message)
    {
        eventLog.Insert(0, $"{DateTime.Now:HH:mm:ss} - {message}");
        if (eventLog.Count > 10)
        {
            eventLog.RemoveAt(eventLog.Count - 1);
        }
    }

    private void ClearLog()
    {
        eventLog.Clear();
    }
}

<style>
    .demo-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .demo-section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .demo-section h3 {
        margin-top: 0;
        color: #333;
    }

    .panel-content {
        padding: 15px;
        background-color: #fff;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .event-log {
        max-height: 200px;
        overflow-y: auto;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
    }

    .log-entry {
        padding: 2px 0;
        border-bottom: 1px solid #eee;
    }

    .log-entry:last-child {
        border-bottom: none;
    }

    .b-dockview-control-icon {
        margin: 5px;
        cursor: pointer;
    }

    .b-dockview-control-icon:hover {
        background-color: #e9ecef;
        border-radius: 4px;
    }
</style>
